Ternary operators: var myVar = (conditional >=<== something) ? showmeifValue : showmeelseValue;

If you are unsure of the amount of arguments -> create a function without parameters -> inside the function create a variable
that is equal to (eg var noOfArgs = arguments.length) -> create a for-loop to run thorugh the noOfArgs and inside do your operation on the
arguments passed later during execution of the function

A function always first checks in ints private local scope before executing. It doesn't matter associaton with other function.
ie. > function f1() {
	var a = 1;
	return f2();
      }
    > function f2(){
	return a;
      }
    > f1();
	a is not defined
    > var a = 5;
    > f1();
	5
Here it doen't matter that f2() is executed inside f1() which contains contains var 'a'. As f2() doen't have variable 'a' in its local scope,
it checks in global scope where 'a' is defined and contains value 'undefined'. Thus executing f1() gives value of executing f2() which is undefined. It's called lexical scoping. Variable 'a' was declared at the moment of writing f2() in global scope with value undefined. Even though later f2() was inside f1() and had access to 'a'.


CLOSURES

function ff() {
  var num = 25;
  return function() {
    return num+25;
    }
}

var aaa = ff() --> Here ff() executed, returns a whole function (which has access to 'num' of local scope), stores the function wholly in aaa
aaa() -> We execute aaa() which is infact the function returned by ff() containing value of 'num'. Now executing aaa() returns 50

Exercise

var n;
function f(){
  var b = "b";
  n = function(){
    return b;
  }
}
> f();	// no return
> n();	// n is defined in global and as we executed f() above, n has access to 'b' from local scope when f() was executed. Now, n() returns "b"
!!! If you execute n() before f(), n is defined in global and has no variable 'b' within its scope. So it returns 'undefined' as return b;

